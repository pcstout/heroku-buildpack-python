#!/usr/bin/env bash

PYTHON_VERSION=$(cat runtime.txt)
# Remove leading and trailing whitespace. Note: This implementation relies upon
# `extglob` being set, which is the case thanks to `bin/utils` being run earlier.
PYTHON_VERSION="${PYTHON_VERSION##+([[:space:]])}"
PYTHON_VERSION="${PYTHON_VERSION%%+([[:space:]])}"

function eol_python_version_error() {
  local major_version="${1}"
  local eol_date="${2}"
  puts-warn
  puts-warn "Python ${major_version} reached upstream end-of-life on ${eol_date}, and is"
  puts-warn "therefore no longer receiving security updates:"
  puts-warn "https://devguide.python.org/versions/#supported-versions"
  puts-warn
  puts-warn "As such, it is no longer supported by this buildpack."
  puts-warn
  puts-warn "Please upgrade to a newer Python version."
  puts-warn
  puts-warn "For a list of the supported Python versions, see:"
  puts-warn "https://devcenter.heroku.com/articles/python-support#supported-runtimes"
  puts-warn
  meta_set "failure_reason" "python-version-eol"
  exit 1
}

# We check for EOL prior to checking if the archive exists on S3, to ensure the more specific EOL error
# message is still shown for newer stacks where the EOL Python versions might not have been built.
case "${PYTHON_VERSION}" in
  python-3.6.+([0-9]))
    eol_python_version_error "3.6" "December 23rd, 2021"
    ;;
  *) ;;
esac

# The Python runtime archive filename is of form: 'python-X.Y.Z-ubuntu-18.04-amd64.tar.gz'
# The Ubuntu version is calculated from `STACK` since it's faster than calling `lsb_release`.
UBUNTU_VERSION="${STACK/heroku-}.04"
ARCH=$(dpkg --print-architecture)
PYTHON_PACK_FILE="${BUILDPACK_DIR}/python/python-3.7.17-ubuntu-18.04-amd64.tar.gz"

if [ ! -f $PYTHON_PACK_FILE ]; then
    puts-warn
    puts-warn "Python package file not found: ${$PYTHON_PACK_FILE}"
    puts-warn
    meta_set "failure_reason" "python-version-not-found"
    exit 1
fi

if [[ "$STACK" != "$CACHED_PYTHON_STACK" ]]; then
    puts-step "Stack has changed from $CACHED_PYTHON_STACK to $STACK, clearing cache"
    rm -rf .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor .heroku/python .heroku/python-sqlite3-version
fi

if [[ -f .heroku/python-version ]]; then
  if [[ ! "$(cat .heroku/python-version)" == "$PYTHON_VERSION" ]]; then
      puts-step "Python version has changed from $(cat .heroku/python-version) to ${PYTHON_VERSION}, clearing cache"
      rm -rf .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

# If using Pip, check if we should reinstall python dependencies given that requirements.txt
# is non-deterministic (not all packages pinned, doesn't handle uninstalls etc). We don't need
# to do this when using Pipenv, since it has a lockfile and syncs the packages for us.
if [[ -f "${BUILD_DIR}/requirements.txt" ]]; then
  if [[ ! -f "$CACHE_DIR/.heroku/requirements.txt" ]]; then
    # This is a the first build of an app (or the build cache was cleared). Since there
    # are no cached packages, we only need to store the requirements file for next time.
    cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
  else
    # IF there IS a cached directory, check for differences with the new one
    if ! diff "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt" &> /dev/null; then
      puts-step "Requirements file has been changed, clearing cached dependencies"
      # if there are any differences, clear the Python cache
      # Installing Python over again does not take noticably more time
      cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
      rm -rf .heroku/python
      unset SKIP_INSTALL
    else
      puts-step "No change in requirements detected, installing from cache"
    fi
  fi
fi

if [[ -n "${SKIP_INSTALL}" ]]; then
  puts-step "Using cached install of ${PYTHON_VERSION}"
else
  puts-step "Installing ${PYTHON_VERSION}"

  # Prepare destination directory.
  mkdir -p .heroku/python

  if ! tar xz --directory .heroku/python -f $PYTHON_PACK_FILE; then
    # The Python version was confirmed to exist previously, so any failure here is due to
    # a networking issue or archive/buildpack bug rather than the runtime not existing.
    puts-warn "Failed to extract/install ${PYTHON_VERSION}"
    meta_set "failure_reason" "python-download"
    exit 1
  fi

  # Record for future reference.
  echo "$PYTHON_VERSION" > .heroku/python-version
  echo "$STACK" > .heroku/python-stack

  hash -r
fi

PIP_VERSION=$(get_requirement_version 'pip')
SETUPTOOLS_VERSION=$(get_requirement_version 'setuptools')
WHEEL_VERSION=$(get_requirement_version 'wheel')

puts-step "Installing pip ${PIP_VERSION}, setuptools ${SETUPTOOLS_VERSION} and wheel ${WHEEL_VERSION}"

meta_set "pip_version" "${PIP_VERSION}"
meta_set "setuptools_version" "${SETUPTOOLS_VERSION}"
meta_set "wheel_version" "${WHEEL_VERSION}"

# Python bundles Pip within its standard library, which we can use to install our chosen
# pip version from PyPI, saving us from having to download the usual pip bootstrap script.
# We have to use a glob since the bundled wheel filename contains the pip version, which
# differs between Python versions. We also have to handle the case where there are multiple
# matching pip wheels, since in some versions of Python (eg 3.9.0) multiple versions of pip
# were accidentally bundled upstream. Note: This implementation relies upon `nullglob` being
# set, which is the case thanks to the `bin/utils` that was run earlier.
BUNDLED_PIP_WHEEL_LIST=(.heroku/python/lib/python*/ensurepip/_bundled/pip-*.whl)
BUNDLED_PIP_WHEEL="${BUNDLED_PIP_WHEEL_LIST[0]}"

if [[ -z "${BUNDLED_PIP_WHEEL}" ]]; then
  puts-warn "Failed to locate the bundled pip wheel"
  meta_set "failure_reason" "bundled-pip-not-found"
  exit 1
fi

/app/.heroku/python/bin/python "${BUNDLED_PIP_WHEEL}/pip" install --quiet --disable-pip-version-check --no-cache-dir \
  "pip==${PIP_VERSION}" "setuptools==${SETUPTOOLS_VERSION}" "wheel==${WHEEL_VERSION}"

hash -r
